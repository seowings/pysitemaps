{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pysitemaps: Python Package for Sitemaps \u00b6 pysitemaps package can be used to (systematically) generate and analyze sitemaps. Whats in pysitemaps? \u00b6 We believe in monolithic software development and created this tiny package that does its job without any bloat. How to Use pysitemaps? \u00b6 You can find detailed tutorial on pysitemaps tutorial website . Contribute \u00b6 Pull Requests, Feature Suggestions, and collaborations are welcome. About Us \u00b6 SERP Wings is a digital organization which develops software solutions for Boosting SERP Performance Though Opensource Tools . seowings is an opensource project to write, develop and promote tools for Data Sciences and Digital Marketing.","title":"Home"},{"location":"#pysitemaps-python-package-for-sitemaps","text":"pysitemaps package can be used to (systematically) generate and analyze sitemaps.","title":"pysitemaps: Python Package for Sitemaps"},{"location":"#whats-in-pysitemaps","text":"We believe in monolithic software development and created this tiny package that does its job without any bloat.","title":"Whats in pysitemaps?"},{"location":"#how-to-use-pysitemaps","text":"You can find detailed tutorial on pysitemaps tutorial website .","title":"How to Use pysitemaps?"},{"location":"#contribute","text":"Pull Requests, Feature Suggestions, and collaborations are welcome.","title":"Contribute"},{"location":"#about-us","text":"SERP Wings is a digital organization which develops software solutions for Boosting SERP Performance Though Opensource Tools . seowings is an opensource project to write, develop and promote tools for Data Sciences and Digital Marketing.","title":"About Us"},{"location":"api/","text":"pysitemaps \u00b6 A class to represent a Sitemap. This class contains several function methods to read and fetch the website sitemap from a local or a remote file location. You can use write function to save the file to any file location. Attributes \u00b6 str website netloc (with or without Scheme) str sitemap location of the current website (with scheme and should end with .xml) str Loation of the XSL Style Sheet File dict contain sitemap content. Parent Key contains main sitemap. If Sub Sitemaps are present then they are included in sub_sitemps. Methods \u00b6 read(file_path=\u201d\u201c,include_urls=False): Read Sitemap from file_path. File should end with .xml extention. Include_urls will include all URL/sitemap locs. fetch(file_path=\u201d\u201c, include_urls=False): Fetch remote sitemap. file_path should end with .xml extention. Include_urls will include all URL/sitemap locs. append(object_to_append): Append any object to Sitemap e.g. XMLDocument as sitemap, or URL, and dict Object as URL. as_dict return sitemap as a dict/json object. write write sitemap to a local file. Source code in pysitemaps/__init__.py class Sitemap: \"\"\" A class to represent a Sitemap. This class contains several function methods to read and fetch the website sitemap from a local or a remote file location. You can use write function to save the file to any file location. Attributes ---------- website_name : str website netloc (with or without Scheme) file_path : str sitemap location of the current website (with scheme and should end with .xml) xsl_file : str Loation of the XSL Style Sheet File content : dict contain sitemap content. Parent Key contains main sitemap. If Sub Sitemaps are present then they are included in sub_sitemps. Methods ------- read(file_path=\"\",include_urls=False): Read Sitemap from file_path. File should end with .xml extention. Include_urls will include all URL/sitemap locs. fetch(file_path=\"\", include_urls=False): Fetch remote sitemap. file_path should end with .xml extention. Include_urls will include all URL/sitemap locs. append(object_to_append): Append any object to Sitemap e.g. XMLDocument as sitemap, or URL, and dict Object as URL. as_dict: return sitemap as a dict/json object. write: write sitemap to a local file. \"\"\" def __init__( self, website_name: str = None, file_path: str = \"sitemap.xml\", xsl_file: str = \"\", ) -> None: \"\"\"Initlaize Sitemap Object Args: website_name (str, optional): Webiste Name. Defaults to None. file_path (str, optional): Path of Sitemap.xml. Defaults to \"sitemap.xml\". xsl_file (str, optional): Path of xsl_file. Defaults to \"\". \"\"\" if website_name: self.website_name = website_name else: raise \"Cannot Create Sitemap object. Please add sitename to the argument\" self.xsl_file = xsl_file self.file_path = file_path self.content = { \"parent\": XmlDocument(file_path), \"sub_sitemaps\": [], } def read(self, file_path: str = \"\") -> None: \"\"\"Read sitemap from local file_path If not specified then file_path specified at the time creation of Sitemap objet. Args: file_path (str, optional): Sitemap file path. Defaults to \"\". \"\"\" if not file_path: file_path = self.file_path if file_path.endswith(\"xml\"): with open(file_path, \"r\") as f: xml_as_text = f.read() self.xsl_file = extract_xsl_file(xml_as_text=xml_as_text) self.content[\"parent\"] = XmlDocument(file_path) self.content[\"parent\"].add_from_text(xml_as_text) self.content[\"sub_sitemaps\"] += extract_sub_sitemaps(xml_as_text) def fetch(self, file_path: str = \"\", include_urls: bool = False) -> None: \"\"\"fetch remote sitemap. If File name is not specified then function will locate is by browsing the website. Args: file_path (str, optional): Url Path of sitemap. Defaults to \"\". include_urls (bool, optional): If true then Urls present in the sitemap will be included. Defaults to False. \"\"\" sitemaps = [file_path] if not file_path.endswith(\"xml\"): sitemaps = search_sitemap(self.website_name) for file_path in sitemaps: if file_path.endswith(\"xml\"): self.content[\"parent\"] = XmlDocument( file_path, include_urls=include_urls ) response = get_remote_content(file_path) if response.status_code < 400: self.xsl_file = extract_xsl_file(xml_as_text=response.text) self.content[\"sub_sitemaps\"] += extract_sub_sitemaps( response.text, include_urls=include_urls ) def append(self, object_to_append) -> None: \"\"\"Append any of XmlDocument, Url, dict Object Args: object_to_append (XmlDocument | Url | dict): append Url to current Sitemap \"\"\" if isinstance(object_to_append, XmlDocument): self.content[\"sub_sitemaps\"].append(object_to_append) elif isinstance(object_to_append, Url): self.content[\"parent\"].add_object(object_to_append) elif isinstance(object_to_append, dict): self.content[\"parent\"].add_url( object_to_append[\"loc\"], lastmod=object_to_append[\"lastmod\"], images_loc=object_to_append[\"images_loc\"], ) def as_dict(self) -> dict: \"\"\"return Stimeap object as dict. Returns: dict: contains 'parent', 'xsl-file' and 'sub_sitemaps' \"\"\" return { \"parent\": self.content[\"parent\"].as_dict(), \"xsl-file\": self.xsl_file, \"sub_sitemaps\": [ sub_sitemap.as_dict() for sub_sitemap in self.content[\"sub_sitemaps\"] ], } def write( self, path: str = \"\", ) -> None: \"\"\"write Sitemap to xml file Args: path (str, optional): specify output path/folder location (without file name). Defaults to \"\". \"\"\" parent_sitemap = self.content[\"parent\"] sub_sitemaps = self.content[\"sub_sitemaps\"] for sub_sitemap in sub_sitemaps: sitemap_name = sub_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] url_set = sub_sitemap.as_dict()[\"urls\"] if url_set: write_sub_sitemap( url_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, ) if sub_sitemaps and parent_sitemap: sitemap_name = parent_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] sub_sitemaps_set = [ {\"loc\": item.as_dict()[\"loc\"], \"lastmod\": item.as_dict()[\"lastmod\"]} for item in self.content[\"sub_sitemaps\"] ] if sub_sitemaps_set: write_index_sitemap( sub_sitemaps_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, ) elif parent_sitemap: sitemap_name = parent_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] url_set = parent_sitemap.as_dict()[\"urls\"] if url_set: write_sub_sitemap( url_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, ) __init__(website_name=None, file_path='sitemap.xml', xsl_file='') \u00b6 Initlaize Sitemap Object Parameters: Name Type Description Default website_name str Webiste Name. Defaults to None. None file_path str Path of Sitemap.xml. Defaults to \u201csitemap.xml\u201d. 'sitemap.xml' xsl_file str Path of xsl_file. Defaults to \u201c\u201d. '' Source code in pysitemaps/__init__.py def __init__( self, website_name: str = None, file_path: str = \"sitemap.xml\", xsl_file: str = \"\", ) -> None: \"\"\"Initlaize Sitemap Object Args: website_name (str, optional): Webiste Name. Defaults to None. file_path (str, optional): Path of Sitemap.xml. Defaults to \"sitemap.xml\". xsl_file (str, optional): Path of xsl_file. Defaults to \"\". \"\"\" if website_name: self.website_name = website_name else: raise \"Cannot Create Sitemap object. Please add sitename to the argument\" self.xsl_file = xsl_file self.file_path = file_path self.content = { \"parent\": XmlDocument(file_path), \"sub_sitemaps\": [], } append(object_to_append) \u00b6 Append any of XmlDocument, Url, dict Object Parameters: Name Type Description Default object_to_append XmlDocument | Url | dict append Url to current Sitemap required Source code in pysitemaps/__init__.py def append(self, object_to_append) -> None: \"\"\"Append any of XmlDocument, Url, dict Object Args: object_to_append (XmlDocument | Url | dict): append Url to current Sitemap \"\"\" if isinstance(object_to_append, XmlDocument): self.content[\"sub_sitemaps\"].append(object_to_append) elif isinstance(object_to_append, Url): self.content[\"parent\"].add_object(object_to_append) elif isinstance(object_to_append, dict): self.content[\"parent\"].add_url( object_to_append[\"loc\"], lastmod=object_to_append[\"lastmod\"], images_loc=object_to_append[\"images_loc\"], ) as_dict() \u00b6 return Stimeap object as dict. Returns: Name Type Description dict dict contains \u2018parent\u2019, \u2018xsl-file\u2019 and \u2018sub_sitemaps\u2019 Source code in pysitemaps/__init__.py def as_dict(self) -> dict: \"\"\"return Stimeap object as dict. Returns: dict: contains 'parent', 'xsl-file' and 'sub_sitemaps' \"\"\" return { \"parent\": self.content[\"parent\"].as_dict(), \"xsl-file\": self.xsl_file, \"sub_sitemaps\": [ sub_sitemap.as_dict() for sub_sitemap in self.content[\"sub_sitemaps\"] ], } fetch(file_path='', include_urls=False) \u00b6 fetch remote sitemap. If File name is not specified then function will locate is by browsing the website. Parameters: Name Type Description Default file_path str Url Path of sitemap. Defaults to \u201c\u201d. '' include_urls bool If true then Urls present in the sitemap will be included. Defaults to False. False Source code in pysitemaps/__init__.py def fetch(self, file_path: str = \"\", include_urls: bool = False) -> None: \"\"\"fetch remote sitemap. If File name is not specified then function will locate is by browsing the website. Args: file_path (str, optional): Url Path of sitemap. Defaults to \"\". include_urls (bool, optional): If true then Urls present in the sitemap will be included. Defaults to False. \"\"\" sitemaps = [file_path] if not file_path.endswith(\"xml\"): sitemaps = search_sitemap(self.website_name) for file_path in sitemaps: if file_path.endswith(\"xml\"): self.content[\"parent\"] = XmlDocument( file_path, include_urls=include_urls ) response = get_remote_content(file_path) if response.status_code < 400: self.xsl_file = extract_xsl_file(xml_as_text=response.text) self.content[\"sub_sitemaps\"] += extract_sub_sitemaps( response.text, include_urls=include_urls ) read(file_path='') \u00b6 Read sitemap from local file_path If not specified then file_path specified at the time creation of Sitemap objet. Parameters: Name Type Description Default file_path str Sitemap file path. Defaults to \u201c\u201d. '' Source code in pysitemaps/__init__.py def read(self, file_path: str = \"\") -> None: \"\"\"Read sitemap from local file_path If not specified then file_path specified at the time creation of Sitemap objet. Args: file_path (str, optional): Sitemap file path. Defaults to \"\". \"\"\" if not file_path: file_path = self.file_path if file_path.endswith(\"xml\"): with open(file_path, \"r\") as f: xml_as_text = f.read() self.xsl_file = extract_xsl_file(xml_as_text=xml_as_text) self.content[\"parent\"] = XmlDocument(file_path) self.content[\"parent\"].add_from_text(xml_as_text) self.content[\"sub_sitemaps\"] += extract_sub_sitemaps(xml_as_text) write(path='') \u00b6 write Sitemap to xml file Parameters: Name Type Description Default path str specify output path/folder location (without file name). Defaults to \u201c\u201d. '' Source code in pysitemaps/__init__.py def write( self, path: str = \"\", ) -> None: \"\"\"write Sitemap to xml file Args: path (str, optional): specify output path/folder location (without file name). Defaults to \"\". \"\"\" parent_sitemap = self.content[\"parent\"] sub_sitemaps = self.content[\"sub_sitemaps\"] for sub_sitemap in sub_sitemaps: sitemap_name = sub_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] url_set = sub_sitemap.as_dict()[\"urls\"] if url_set: write_sub_sitemap( url_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, ) if sub_sitemaps and parent_sitemap: sitemap_name = parent_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] sub_sitemaps_set = [ {\"loc\": item.as_dict()[\"loc\"], \"lastmod\": item.as_dict()[\"lastmod\"]} for item in self.content[\"sub_sitemaps\"] ] if sub_sitemaps_set: write_index_sitemap( sub_sitemaps_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, ) elif parent_sitemap: sitemap_name = parent_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] url_set = parent_sitemap.as_dict()[\"urls\"] if url_set: write_sub_sitemap( url_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, )","title":"API"},{"location":"api/#pysitemaps","text":"A class to represent a Sitemap. This class contains several function methods to read and fetch the website sitemap from a local or a remote file location. You can use write function to save the file to any file location.","title":"pysitemaps"},{"location":"api/#pysitemaps.Sitemap--attributes","text":"str website netloc (with or without Scheme) str sitemap location of the current website (with scheme and should end with .xml) str Loation of the XSL Style Sheet File dict contain sitemap content. Parent Key contains main sitemap. If Sub Sitemaps are present then they are included in sub_sitemps.","title":"Attributes"},{"location":"api/#pysitemaps.Sitemap--methods","text":"read(file_path=\u201d\u201c,include_urls=False): Read Sitemap from file_path. File should end with .xml extention. Include_urls will include all URL/sitemap locs. fetch(file_path=\u201d\u201c, include_urls=False): Fetch remote sitemap. file_path should end with .xml extention. Include_urls will include all URL/sitemap locs. append(object_to_append): Append any object to Sitemap e.g. XMLDocument as sitemap, or URL, and dict Object as URL. as_dict return sitemap as a dict/json object. write write sitemap to a local file. Source code in pysitemaps/__init__.py class Sitemap: \"\"\" A class to represent a Sitemap. This class contains several function methods to read and fetch the website sitemap from a local or a remote file location. You can use write function to save the file to any file location. Attributes ---------- website_name : str website netloc (with or without Scheme) file_path : str sitemap location of the current website (with scheme and should end with .xml) xsl_file : str Loation of the XSL Style Sheet File content : dict contain sitemap content. Parent Key contains main sitemap. If Sub Sitemaps are present then they are included in sub_sitemps. Methods ------- read(file_path=\"\",include_urls=False): Read Sitemap from file_path. File should end with .xml extention. Include_urls will include all URL/sitemap locs. fetch(file_path=\"\", include_urls=False): Fetch remote sitemap. file_path should end with .xml extention. Include_urls will include all URL/sitemap locs. append(object_to_append): Append any object to Sitemap e.g. XMLDocument as sitemap, or URL, and dict Object as URL. as_dict: return sitemap as a dict/json object. write: write sitemap to a local file. \"\"\" def __init__( self, website_name: str = None, file_path: str = \"sitemap.xml\", xsl_file: str = \"\", ) -> None: \"\"\"Initlaize Sitemap Object Args: website_name (str, optional): Webiste Name. Defaults to None. file_path (str, optional): Path of Sitemap.xml. Defaults to \"sitemap.xml\". xsl_file (str, optional): Path of xsl_file. Defaults to \"\". \"\"\" if website_name: self.website_name = website_name else: raise \"Cannot Create Sitemap object. Please add sitename to the argument\" self.xsl_file = xsl_file self.file_path = file_path self.content = { \"parent\": XmlDocument(file_path), \"sub_sitemaps\": [], } def read(self, file_path: str = \"\") -> None: \"\"\"Read sitemap from local file_path If not specified then file_path specified at the time creation of Sitemap objet. Args: file_path (str, optional): Sitemap file path. Defaults to \"\". \"\"\" if not file_path: file_path = self.file_path if file_path.endswith(\"xml\"): with open(file_path, \"r\") as f: xml_as_text = f.read() self.xsl_file = extract_xsl_file(xml_as_text=xml_as_text) self.content[\"parent\"] = XmlDocument(file_path) self.content[\"parent\"].add_from_text(xml_as_text) self.content[\"sub_sitemaps\"] += extract_sub_sitemaps(xml_as_text) def fetch(self, file_path: str = \"\", include_urls: bool = False) -> None: \"\"\"fetch remote sitemap. If File name is not specified then function will locate is by browsing the website. Args: file_path (str, optional): Url Path of sitemap. Defaults to \"\". include_urls (bool, optional): If true then Urls present in the sitemap will be included. Defaults to False. \"\"\" sitemaps = [file_path] if not file_path.endswith(\"xml\"): sitemaps = search_sitemap(self.website_name) for file_path in sitemaps: if file_path.endswith(\"xml\"): self.content[\"parent\"] = XmlDocument( file_path, include_urls=include_urls ) response = get_remote_content(file_path) if response.status_code < 400: self.xsl_file = extract_xsl_file(xml_as_text=response.text) self.content[\"sub_sitemaps\"] += extract_sub_sitemaps( response.text, include_urls=include_urls ) def append(self, object_to_append) -> None: \"\"\"Append any of XmlDocument, Url, dict Object Args: object_to_append (XmlDocument | Url | dict): append Url to current Sitemap \"\"\" if isinstance(object_to_append, XmlDocument): self.content[\"sub_sitemaps\"].append(object_to_append) elif isinstance(object_to_append, Url): self.content[\"parent\"].add_object(object_to_append) elif isinstance(object_to_append, dict): self.content[\"parent\"].add_url( object_to_append[\"loc\"], lastmod=object_to_append[\"lastmod\"], images_loc=object_to_append[\"images_loc\"], ) def as_dict(self) -> dict: \"\"\"return Stimeap object as dict. Returns: dict: contains 'parent', 'xsl-file' and 'sub_sitemaps' \"\"\" return { \"parent\": self.content[\"parent\"].as_dict(), \"xsl-file\": self.xsl_file, \"sub_sitemaps\": [ sub_sitemap.as_dict() for sub_sitemap in self.content[\"sub_sitemaps\"] ], } def write( self, path: str = \"\", ) -> None: \"\"\"write Sitemap to xml file Args: path (str, optional): specify output path/folder location (without file name). Defaults to \"\". \"\"\" parent_sitemap = self.content[\"parent\"] sub_sitemaps = self.content[\"sub_sitemaps\"] for sub_sitemap in sub_sitemaps: sitemap_name = sub_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] url_set = sub_sitemap.as_dict()[\"urls\"] if url_set: write_sub_sitemap( url_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, ) if sub_sitemaps and parent_sitemap: sitemap_name = parent_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] sub_sitemaps_set = [ {\"loc\": item.as_dict()[\"loc\"], \"lastmod\": item.as_dict()[\"lastmod\"]} for item in self.content[\"sub_sitemaps\"] ] if sub_sitemaps_set: write_index_sitemap( sub_sitemaps_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, ) elif parent_sitemap: sitemap_name = parent_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] url_set = parent_sitemap.as_dict()[\"urls\"] if url_set: write_sub_sitemap( url_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, )","title":"Methods"},{"location":"api/#pysitemaps.Sitemap.__init__","text":"Initlaize Sitemap Object Parameters: Name Type Description Default website_name str Webiste Name. Defaults to None. None file_path str Path of Sitemap.xml. Defaults to \u201csitemap.xml\u201d. 'sitemap.xml' xsl_file str Path of xsl_file. Defaults to \u201c\u201d. '' Source code in pysitemaps/__init__.py def __init__( self, website_name: str = None, file_path: str = \"sitemap.xml\", xsl_file: str = \"\", ) -> None: \"\"\"Initlaize Sitemap Object Args: website_name (str, optional): Webiste Name. Defaults to None. file_path (str, optional): Path of Sitemap.xml. Defaults to \"sitemap.xml\". xsl_file (str, optional): Path of xsl_file. Defaults to \"\". \"\"\" if website_name: self.website_name = website_name else: raise \"Cannot Create Sitemap object. Please add sitename to the argument\" self.xsl_file = xsl_file self.file_path = file_path self.content = { \"parent\": XmlDocument(file_path), \"sub_sitemaps\": [], }","title":"__init__()"},{"location":"api/#pysitemaps.Sitemap.append","text":"Append any of XmlDocument, Url, dict Object Parameters: Name Type Description Default object_to_append XmlDocument | Url | dict append Url to current Sitemap required Source code in pysitemaps/__init__.py def append(self, object_to_append) -> None: \"\"\"Append any of XmlDocument, Url, dict Object Args: object_to_append (XmlDocument | Url | dict): append Url to current Sitemap \"\"\" if isinstance(object_to_append, XmlDocument): self.content[\"sub_sitemaps\"].append(object_to_append) elif isinstance(object_to_append, Url): self.content[\"parent\"].add_object(object_to_append) elif isinstance(object_to_append, dict): self.content[\"parent\"].add_url( object_to_append[\"loc\"], lastmod=object_to_append[\"lastmod\"], images_loc=object_to_append[\"images_loc\"], )","title":"append()"},{"location":"api/#pysitemaps.Sitemap.as_dict","text":"return Stimeap object as dict. Returns: Name Type Description dict dict contains \u2018parent\u2019, \u2018xsl-file\u2019 and \u2018sub_sitemaps\u2019 Source code in pysitemaps/__init__.py def as_dict(self) -> dict: \"\"\"return Stimeap object as dict. Returns: dict: contains 'parent', 'xsl-file' and 'sub_sitemaps' \"\"\" return { \"parent\": self.content[\"parent\"].as_dict(), \"xsl-file\": self.xsl_file, \"sub_sitemaps\": [ sub_sitemap.as_dict() for sub_sitemap in self.content[\"sub_sitemaps\"] ], }","title":"as_dict()"},{"location":"api/#pysitemaps.Sitemap.fetch","text":"fetch remote sitemap. If File name is not specified then function will locate is by browsing the website. Parameters: Name Type Description Default file_path str Url Path of sitemap. Defaults to \u201c\u201d. '' include_urls bool If true then Urls present in the sitemap will be included. Defaults to False. False Source code in pysitemaps/__init__.py def fetch(self, file_path: str = \"\", include_urls: bool = False) -> None: \"\"\"fetch remote sitemap. If File name is not specified then function will locate is by browsing the website. Args: file_path (str, optional): Url Path of sitemap. Defaults to \"\". include_urls (bool, optional): If true then Urls present in the sitemap will be included. Defaults to False. \"\"\" sitemaps = [file_path] if not file_path.endswith(\"xml\"): sitemaps = search_sitemap(self.website_name) for file_path in sitemaps: if file_path.endswith(\"xml\"): self.content[\"parent\"] = XmlDocument( file_path, include_urls=include_urls ) response = get_remote_content(file_path) if response.status_code < 400: self.xsl_file = extract_xsl_file(xml_as_text=response.text) self.content[\"sub_sitemaps\"] += extract_sub_sitemaps( response.text, include_urls=include_urls )","title":"fetch()"},{"location":"api/#pysitemaps.Sitemap.read","text":"Read sitemap from local file_path If not specified then file_path specified at the time creation of Sitemap objet. Parameters: Name Type Description Default file_path str Sitemap file path. Defaults to \u201c\u201d. '' Source code in pysitemaps/__init__.py def read(self, file_path: str = \"\") -> None: \"\"\"Read sitemap from local file_path If not specified then file_path specified at the time creation of Sitemap objet. Args: file_path (str, optional): Sitemap file path. Defaults to \"\". \"\"\" if not file_path: file_path = self.file_path if file_path.endswith(\"xml\"): with open(file_path, \"r\") as f: xml_as_text = f.read() self.xsl_file = extract_xsl_file(xml_as_text=xml_as_text) self.content[\"parent\"] = XmlDocument(file_path) self.content[\"parent\"].add_from_text(xml_as_text) self.content[\"sub_sitemaps\"] += extract_sub_sitemaps(xml_as_text)","title":"read()"},{"location":"api/#pysitemaps.Sitemap.write","text":"write Sitemap to xml file Parameters: Name Type Description Default path str specify output path/folder location (without file name). Defaults to \u201c\u201d. '' Source code in pysitemaps/__init__.py def write( self, path: str = \"\", ) -> None: \"\"\"write Sitemap to xml file Args: path (str, optional): specify output path/folder location (without file name). Defaults to \"\". \"\"\" parent_sitemap = self.content[\"parent\"] sub_sitemaps = self.content[\"sub_sitemaps\"] for sub_sitemap in sub_sitemaps: sitemap_name = sub_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] url_set = sub_sitemap.as_dict()[\"urls\"] if url_set: write_sub_sitemap( url_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, ) if sub_sitemaps and parent_sitemap: sitemap_name = parent_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] sub_sitemaps_set = [ {\"loc\": item.as_dict()[\"loc\"], \"lastmod\": item.as_dict()[\"lastmod\"]} for item in self.content[\"sub_sitemaps\"] ] if sub_sitemaps_set: write_index_sitemap( sub_sitemaps_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, ) elif parent_sitemap: sitemap_name = parent_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] url_set = parent_sitemap.as_dict()[\"urls\"] if url_set: write_sub_sitemap( url_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, )","title":"write()"},{"location":"tutorial/","text":"Tutorial: How to use pysitemaps \u00b6 A detailed tutorial is available at serpwings pysitemaps tutorial page","title":"Tutorial"},{"location":"tutorial/#tutorial-how-to-use-pysitemaps","text":"A detailed tutorial is available at serpwings pysitemaps tutorial page","title":"Tutorial: How to use pysitemaps"}]}