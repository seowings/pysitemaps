{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pysitemaps: Python Package for Sitemaps \u00b6 pysitemaps package can be used to (systematically) generate and analyze sitemaps. Whats in pysitemaps? \u00b6 We believe in monolithic software development and created this tiny package that does its job without any bloat. How to Use pysitemaps? \u00b6 You can find detailed tutorial on pysitemaps tutorial website . Contribute \u00b6 Pull Requests, Feature Suggestions, and collaborations are welcome. About Us \u00b6 SERP Wings is a digital organization which develops software solutions for Boosting SERP Performance Though Opensource Tools . seowings is an opensource project to write, develop and promote tools for Data Sciences and Digital Marketing.","title":"Home"},{"location":"#pysitemaps-python-package-for-sitemaps","text":"pysitemaps package can be used to (systematically) generate and analyze sitemaps.","title":"pysitemaps: Python Package for Sitemaps"},{"location":"#whats-in-pysitemaps","text":"We believe in monolithic software development and created this tiny package that does its job without any bloat.","title":"Whats in pysitemaps?"},{"location":"#how-to-use-pysitemaps","text":"You can find detailed tutorial on pysitemaps tutorial website .","title":"How to Use pysitemaps?"},{"location":"#contribute","text":"Pull Requests, Feature Suggestions, and collaborations are welcome.","title":"Contribute"},{"location":"#about-us","text":"SERP Wings is a digital organization which develops software solutions for Boosting SERP Performance Though Opensource Tools . seowings is an opensource project to write, develop and promote tools for Data Sciences and Digital Marketing.","title":"About Us"},{"location":"sitemap/","text":"Sitemap Class \u00b6 This class contains several function methods to read and fetch the website sitemap from a local or a remote file location. You can use write function to save the file to any file location. Source code in pysitemaps/__init__.py class Sitemap: \"\"\"Sitemap: A class to represent a Sitemap. This class contains several function methods to read and fetch the website sitemap from a local or a remote file location. You can use write function to save the file to any file location. \"\"\" def __init__( self, website_name: str = None, file_path: str = \"\", xsl_file: str = \"\", ) -> None: \"\"\"Initlaize Sitemap Object Args: website_name (str, optional): Webiste Name. Defaults to None. file_path (str, optional): Path of Sitemap.xml. Defaults to \"\". xsl_file (str, optional): Path of xsl_file. Defaults to \"\". \"\"\" if website_name: self.website_name = website_name else: raise \"Cannot Create Sitemap object. Please add sitename to the argument\" self.xsl_file = xsl_file self.file_path = file_path self.content = { \"parent\": XmlDocument(file_path), \"sub_sitemaps\": [], } def read(self, file_path: str = \"\") -> None: \"\"\"Read sitemap from local file_path If not specified then file_path specified at the time creation of Sitemap objet. Args: file_path (str, optional): Sitemap file path. Defaults to \"\". \"\"\" if not file_path: file_path = self.file_path if file_path.endswith(\"xml\"): with open(file_path, \"r\") as f: xml_as_text = f.read() self.xsl_file = extract_xsl_file(xml_as_text=xml_as_text) self.content[\"parent\"] = XmlDocument(file_path) self.content[\"parent\"].add_from_text(xml_as_text) self.content[\"sub_sitemaps\"] += extract_sub_sitemaps(xml_as_text) def fetch(self, file_path: str = \"\", include_urls: bool = False) -> None: \"\"\"fetch remote sitemap. If File name is not specified then function will locate is by browsing the website. Args: file_path (str, optional): Url Path of sitemap. Defaults to \"\". include_urls (bool, optional): If true then Urls present in the sitemap will be included. Defaults to False. \"\"\" sitemaps = [file_path] if not file_path.endswith(\"xml\"): sitemaps = search_sitemap(self.website_name) for sitemap in sitemaps: if sitemap.endswith(\"xml\"): self.content[\"parent\"] = XmlDocument( sitemap, include_urls=include_urls ) response = get_remote_content(sitemap) if response.status_code < 400: self.xsl_file = extract_xsl_file(xml_as_text=response.text) self.content[\"sub_sitemaps\"] += extract_sub_sitemaps( response.text, include_urls=include_urls ) def append(self, object_to_append) -> None: \"\"\"Append any of XmlDocument, Url, dict Object Args: object_to_append (XmlDocument | Url | dict): append Url to current Sitemap \"\"\" if isinstance(object_to_append, XmlDocument): self.content[\"sub_sitemaps\"].append(object_to_append) elif isinstance(object_to_append, Url): self.content[\"parent\"].add_object(object_to_append) elif isinstance(object_to_append, dict): self.content[\"parent\"].add_url( object_to_append[\"loc\"], lastmod=object_to_append[\"lastmod\"], images_loc=object_to_append[\"images_loc\"], ) def as_dict(self) -> dict: \"\"\"return Stimeap object as dict. Returns: dict: contains 'parent', 'xsl-file' and 'sub_sitemaps' \"\"\" return { \"parent\": self.content[\"parent\"].as_dict(), \"xsl-file\": self.xsl_file, \"sub_sitemaps\": [ sub_sitemap.as_dict() for sub_sitemap in self.content[\"sub_sitemaps\"] ], } def write( self, path: str = \"\", ) -> None: \"\"\"write Sitemap to xml file Args: path (str, optional): specify output path/folder location (without file name). Defaults to \"\". \"\"\" parent_sitemap = self.content[\"parent\"] sub_sitemaps = self.content[\"sub_sitemaps\"] for sub_sitemap in sub_sitemaps: sitemap_name = sub_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] url_set = sub_sitemap.as_dict()[\"urls\"] if url_set: write_sub_sitemap( url_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, ) if sub_sitemaps and parent_sitemap: sitemap_name = parent_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] sub_sitemaps_set = [ {\"loc\": item.as_dict()[\"loc\"], \"lastmod\": item.as_dict()[\"lastmod\"]} for item in self.content[\"sub_sitemaps\"] ] if sub_sitemaps_set: write_index_sitemap( sub_sitemaps_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, ) elif parent_sitemap: sitemap_name = parent_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] url_set = parent_sitemap.as_dict()[\"urls\"] if url_set: write_sub_sitemap( url_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, ) __init__(website_name=None, file_path='', xsl_file='') \u00b6 Initlaize Sitemap Object Parameters: Name Type Description Default website_name str Webiste Name. Defaults to None. None file_path str Path of Sitemap.xml. Defaults to \u201c\u201d. '' xsl_file str Path of xsl_file. Defaults to \u201c\u201d. '' Source code in pysitemaps/__init__.py def __init__( self, website_name: str = None, file_path: str = \"\", xsl_file: str = \"\", ) -> None: \"\"\"Initlaize Sitemap Object Args: website_name (str, optional): Webiste Name. Defaults to None. file_path (str, optional): Path of Sitemap.xml. Defaults to \"\". xsl_file (str, optional): Path of xsl_file. Defaults to \"\". \"\"\" if website_name: self.website_name = website_name else: raise \"Cannot Create Sitemap object. Please add sitename to the argument\" self.xsl_file = xsl_file self.file_path = file_path self.content = { \"parent\": XmlDocument(file_path), \"sub_sitemaps\": [], } append(object_to_append) \u00b6 Append any of XmlDocument, Url, dict Object Parameters: Name Type Description Default object_to_append XmlDocument | Url | dict append Url to current Sitemap required Source code in pysitemaps/__init__.py def append(self, object_to_append) -> None: \"\"\"Append any of XmlDocument, Url, dict Object Args: object_to_append (XmlDocument | Url | dict): append Url to current Sitemap \"\"\" if isinstance(object_to_append, XmlDocument): self.content[\"sub_sitemaps\"].append(object_to_append) elif isinstance(object_to_append, Url): self.content[\"parent\"].add_object(object_to_append) elif isinstance(object_to_append, dict): self.content[\"parent\"].add_url( object_to_append[\"loc\"], lastmod=object_to_append[\"lastmod\"], images_loc=object_to_append[\"images_loc\"], ) as_dict() \u00b6 return Stimeap object as dict. Returns: Name Type Description dict dict contains \u2018parent\u2019, \u2018xsl-file\u2019 and \u2018sub_sitemaps\u2019 Source code in pysitemaps/__init__.py def as_dict(self) -> dict: \"\"\"return Stimeap object as dict. Returns: dict: contains 'parent', 'xsl-file' and 'sub_sitemaps' \"\"\" return { \"parent\": self.content[\"parent\"].as_dict(), \"xsl-file\": self.xsl_file, \"sub_sitemaps\": [ sub_sitemap.as_dict() for sub_sitemap in self.content[\"sub_sitemaps\"] ], } fetch(file_path='', include_urls=False) \u00b6 fetch remote sitemap. If File name is not specified then function will locate is by browsing the website. Parameters: Name Type Description Default file_path str Url Path of sitemap. Defaults to \u201c\u201d. '' include_urls bool If true then Urls present in the sitemap will be included. Defaults to False. False Source code in pysitemaps/__init__.py def fetch(self, file_path: str = \"\", include_urls: bool = False) -> None: \"\"\"fetch remote sitemap. If File name is not specified then function will locate is by browsing the website. Args: file_path (str, optional): Url Path of sitemap. Defaults to \"\". include_urls (bool, optional): If true then Urls present in the sitemap will be included. Defaults to False. \"\"\" sitemaps = [file_path] if not file_path.endswith(\"xml\"): sitemaps = search_sitemap(self.website_name) for sitemap in sitemaps: if sitemap.endswith(\"xml\"): self.content[\"parent\"] = XmlDocument( sitemap, include_urls=include_urls ) response = get_remote_content(sitemap) if response.status_code < 400: self.xsl_file = extract_xsl_file(xml_as_text=response.text) self.content[\"sub_sitemaps\"] += extract_sub_sitemaps( response.text, include_urls=include_urls ) read(file_path='') \u00b6 Read sitemap from local file_path If not specified then file_path specified at the time creation of Sitemap objet. Parameters: Name Type Description Default file_path str Sitemap file path. Defaults to \u201c\u201d. '' Source code in pysitemaps/__init__.py def read(self, file_path: str = \"\") -> None: \"\"\"Read sitemap from local file_path If not specified then file_path specified at the time creation of Sitemap objet. Args: file_path (str, optional): Sitemap file path. Defaults to \"\". \"\"\" if not file_path: file_path = self.file_path if file_path.endswith(\"xml\"): with open(file_path, \"r\") as f: xml_as_text = f.read() self.xsl_file = extract_xsl_file(xml_as_text=xml_as_text) self.content[\"parent\"] = XmlDocument(file_path) self.content[\"parent\"].add_from_text(xml_as_text) self.content[\"sub_sitemaps\"] += extract_sub_sitemaps(xml_as_text) write(path='') \u00b6 write Sitemap to xml file Parameters: Name Type Description Default path str specify output path/folder location (without file name). Defaults to \u201c\u201d. '' Source code in pysitemaps/__init__.py def write( self, path: str = \"\", ) -> None: \"\"\"write Sitemap to xml file Args: path (str, optional): specify output path/folder location (without file name). Defaults to \"\". \"\"\" parent_sitemap = self.content[\"parent\"] sub_sitemaps = self.content[\"sub_sitemaps\"] for sub_sitemap in sub_sitemaps: sitemap_name = sub_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] url_set = sub_sitemap.as_dict()[\"urls\"] if url_set: write_sub_sitemap( url_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, ) if sub_sitemaps and parent_sitemap: sitemap_name = parent_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] sub_sitemaps_set = [ {\"loc\": item.as_dict()[\"loc\"], \"lastmod\": item.as_dict()[\"lastmod\"]} for item in self.content[\"sub_sitemaps\"] ] if sub_sitemaps_set: write_index_sitemap( sub_sitemaps_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, ) elif parent_sitemap: sitemap_name = parent_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] url_set = parent_sitemap.as_dict()[\"urls\"] if url_set: write_sub_sitemap( url_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, )","title":"Sitemap Class"},{"location":"sitemap/#sitemap-class","text":"This class contains several function methods to read and fetch the website sitemap from a local or a remote file location. You can use write function to save the file to any file location. Source code in pysitemaps/__init__.py class Sitemap: \"\"\"Sitemap: A class to represent a Sitemap. This class contains several function methods to read and fetch the website sitemap from a local or a remote file location. You can use write function to save the file to any file location. \"\"\" def __init__( self, website_name: str = None, file_path: str = \"\", xsl_file: str = \"\", ) -> None: \"\"\"Initlaize Sitemap Object Args: website_name (str, optional): Webiste Name. Defaults to None. file_path (str, optional): Path of Sitemap.xml. Defaults to \"\". xsl_file (str, optional): Path of xsl_file. Defaults to \"\". \"\"\" if website_name: self.website_name = website_name else: raise \"Cannot Create Sitemap object. Please add sitename to the argument\" self.xsl_file = xsl_file self.file_path = file_path self.content = { \"parent\": XmlDocument(file_path), \"sub_sitemaps\": [], } def read(self, file_path: str = \"\") -> None: \"\"\"Read sitemap from local file_path If not specified then file_path specified at the time creation of Sitemap objet. Args: file_path (str, optional): Sitemap file path. Defaults to \"\". \"\"\" if not file_path: file_path = self.file_path if file_path.endswith(\"xml\"): with open(file_path, \"r\") as f: xml_as_text = f.read() self.xsl_file = extract_xsl_file(xml_as_text=xml_as_text) self.content[\"parent\"] = XmlDocument(file_path) self.content[\"parent\"].add_from_text(xml_as_text) self.content[\"sub_sitemaps\"] += extract_sub_sitemaps(xml_as_text) def fetch(self, file_path: str = \"\", include_urls: bool = False) -> None: \"\"\"fetch remote sitemap. If File name is not specified then function will locate is by browsing the website. Args: file_path (str, optional): Url Path of sitemap. Defaults to \"\". include_urls (bool, optional): If true then Urls present in the sitemap will be included. Defaults to False. \"\"\" sitemaps = [file_path] if not file_path.endswith(\"xml\"): sitemaps = search_sitemap(self.website_name) for sitemap in sitemaps: if sitemap.endswith(\"xml\"): self.content[\"parent\"] = XmlDocument( sitemap, include_urls=include_urls ) response = get_remote_content(sitemap) if response.status_code < 400: self.xsl_file = extract_xsl_file(xml_as_text=response.text) self.content[\"sub_sitemaps\"] += extract_sub_sitemaps( response.text, include_urls=include_urls ) def append(self, object_to_append) -> None: \"\"\"Append any of XmlDocument, Url, dict Object Args: object_to_append (XmlDocument | Url | dict): append Url to current Sitemap \"\"\" if isinstance(object_to_append, XmlDocument): self.content[\"sub_sitemaps\"].append(object_to_append) elif isinstance(object_to_append, Url): self.content[\"parent\"].add_object(object_to_append) elif isinstance(object_to_append, dict): self.content[\"parent\"].add_url( object_to_append[\"loc\"], lastmod=object_to_append[\"lastmod\"], images_loc=object_to_append[\"images_loc\"], ) def as_dict(self) -> dict: \"\"\"return Stimeap object as dict. Returns: dict: contains 'parent', 'xsl-file' and 'sub_sitemaps' \"\"\" return { \"parent\": self.content[\"parent\"].as_dict(), \"xsl-file\": self.xsl_file, \"sub_sitemaps\": [ sub_sitemap.as_dict() for sub_sitemap in self.content[\"sub_sitemaps\"] ], } def write( self, path: str = \"\", ) -> None: \"\"\"write Sitemap to xml file Args: path (str, optional): specify output path/folder location (without file name). Defaults to \"\". \"\"\" parent_sitemap = self.content[\"parent\"] sub_sitemaps = self.content[\"sub_sitemaps\"] for sub_sitemap in sub_sitemaps: sitemap_name = sub_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] url_set = sub_sitemap.as_dict()[\"urls\"] if url_set: write_sub_sitemap( url_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, ) if sub_sitemaps and parent_sitemap: sitemap_name = parent_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] sub_sitemaps_set = [ {\"loc\": item.as_dict()[\"loc\"], \"lastmod\": item.as_dict()[\"lastmod\"]} for item in self.content[\"sub_sitemaps\"] ] if sub_sitemaps_set: write_index_sitemap( sub_sitemaps_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, ) elif parent_sitemap: sitemap_name = parent_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] url_set = parent_sitemap.as_dict()[\"urls\"] if url_set: write_sub_sitemap( url_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, )","title":"Sitemap Class"},{"location":"sitemap/#pysitemaps.Sitemap.__init__","text":"Initlaize Sitemap Object Parameters: Name Type Description Default website_name str Webiste Name. Defaults to None. None file_path str Path of Sitemap.xml. Defaults to \u201c\u201d. '' xsl_file str Path of xsl_file. Defaults to \u201c\u201d. '' Source code in pysitemaps/__init__.py def __init__( self, website_name: str = None, file_path: str = \"\", xsl_file: str = \"\", ) -> None: \"\"\"Initlaize Sitemap Object Args: website_name (str, optional): Webiste Name. Defaults to None. file_path (str, optional): Path of Sitemap.xml. Defaults to \"\". xsl_file (str, optional): Path of xsl_file. Defaults to \"\". \"\"\" if website_name: self.website_name = website_name else: raise \"Cannot Create Sitemap object. Please add sitename to the argument\" self.xsl_file = xsl_file self.file_path = file_path self.content = { \"parent\": XmlDocument(file_path), \"sub_sitemaps\": [], }","title":"__init__()"},{"location":"sitemap/#pysitemaps.Sitemap.append","text":"Append any of XmlDocument, Url, dict Object Parameters: Name Type Description Default object_to_append XmlDocument | Url | dict append Url to current Sitemap required Source code in pysitemaps/__init__.py def append(self, object_to_append) -> None: \"\"\"Append any of XmlDocument, Url, dict Object Args: object_to_append (XmlDocument | Url | dict): append Url to current Sitemap \"\"\" if isinstance(object_to_append, XmlDocument): self.content[\"sub_sitemaps\"].append(object_to_append) elif isinstance(object_to_append, Url): self.content[\"parent\"].add_object(object_to_append) elif isinstance(object_to_append, dict): self.content[\"parent\"].add_url( object_to_append[\"loc\"], lastmod=object_to_append[\"lastmod\"], images_loc=object_to_append[\"images_loc\"], )","title":"append()"},{"location":"sitemap/#pysitemaps.Sitemap.as_dict","text":"return Stimeap object as dict. Returns: Name Type Description dict dict contains \u2018parent\u2019, \u2018xsl-file\u2019 and \u2018sub_sitemaps\u2019 Source code in pysitemaps/__init__.py def as_dict(self) -> dict: \"\"\"return Stimeap object as dict. Returns: dict: contains 'parent', 'xsl-file' and 'sub_sitemaps' \"\"\" return { \"parent\": self.content[\"parent\"].as_dict(), \"xsl-file\": self.xsl_file, \"sub_sitemaps\": [ sub_sitemap.as_dict() for sub_sitemap in self.content[\"sub_sitemaps\"] ], }","title":"as_dict()"},{"location":"sitemap/#pysitemaps.Sitemap.fetch","text":"fetch remote sitemap. If File name is not specified then function will locate is by browsing the website. Parameters: Name Type Description Default file_path str Url Path of sitemap. Defaults to \u201c\u201d. '' include_urls bool If true then Urls present in the sitemap will be included. Defaults to False. False Source code in pysitemaps/__init__.py def fetch(self, file_path: str = \"\", include_urls: bool = False) -> None: \"\"\"fetch remote sitemap. If File name is not specified then function will locate is by browsing the website. Args: file_path (str, optional): Url Path of sitemap. Defaults to \"\". include_urls (bool, optional): If true then Urls present in the sitemap will be included. Defaults to False. \"\"\" sitemaps = [file_path] if not file_path.endswith(\"xml\"): sitemaps = search_sitemap(self.website_name) for sitemap in sitemaps: if sitemap.endswith(\"xml\"): self.content[\"parent\"] = XmlDocument( sitemap, include_urls=include_urls ) response = get_remote_content(sitemap) if response.status_code < 400: self.xsl_file = extract_xsl_file(xml_as_text=response.text) self.content[\"sub_sitemaps\"] += extract_sub_sitemaps( response.text, include_urls=include_urls )","title":"fetch()"},{"location":"sitemap/#pysitemaps.Sitemap.read","text":"Read sitemap from local file_path If not specified then file_path specified at the time creation of Sitemap objet. Parameters: Name Type Description Default file_path str Sitemap file path. Defaults to \u201c\u201d. '' Source code in pysitemaps/__init__.py def read(self, file_path: str = \"\") -> None: \"\"\"Read sitemap from local file_path If not specified then file_path specified at the time creation of Sitemap objet. Args: file_path (str, optional): Sitemap file path. Defaults to \"\". \"\"\" if not file_path: file_path = self.file_path if file_path.endswith(\"xml\"): with open(file_path, \"r\") as f: xml_as_text = f.read() self.xsl_file = extract_xsl_file(xml_as_text=xml_as_text) self.content[\"parent\"] = XmlDocument(file_path) self.content[\"parent\"].add_from_text(xml_as_text) self.content[\"sub_sitemaps\"] += extract_sub_sitemaps(xml_as_text)","title":"read()"},{"location":"sitemap/#pysitemaps.Sitemap.write","text":"write Sitemap to xml file Parameters: Name Type Description Default path str specify output path/folder location (without file name). Defaults to \u201c\u201d. '' Source code in pysitemaps/__init__.py def write( self, path: str = \"\", ) -> None: \"\"\"write Sitemap to xml file Args: path (str, optional): specify output path/folder location (without file name). Defaults to \"\". \"\"\" parent_sitemap = self.content[\"parent\"] sub_sitemaps = self.content[\"sub_sitemaps\"] for sub_sitemap in sub_sitemaps: sitemap_name = sub_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] url_set = sub_sitemap.as_dict()[\"urls\"] if url_set: write_sub_sitemap( url_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, ) if sub_sitemaps and parent_sitemap: sitemap_name = parent_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] sub_sitemaps_set = [ {\"loc\": item.as_dict()[\"loc\"], \"lastmod\": item.as_dict()[\"lastmod\"]} for item in self.content[\"sub_sitemaps\"] ] if sub_sitemaps_set: write_index_sitemap( sub_sitemaps_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, ) elif parent_sitemap: sitemap_name = parent_sitemap.as_dict()[\"loc\"].split(\"/\")[-1] url_set = parent_sitemap.as_dict()[\"urls\"] if url_set: write_sub_sitemap( url_set, self.website_name, self.xsl_file, path=path, file_name=sitemap_name, )","title":"write()"},{"location":"tutorial/","text":"Tutorial: How to use pysitemaps \u00b6 A detailed tutorial is available at serpwings pysitemaps tutorial page","title":"Tutorial"},{"location":"tutorial/#tutorial-how-to-use-pysitemaps","text":"A detailed tutorial is available at serpwings pysitemaps tutorial page","title":"Tutorial: How to use pysitemaps"},{"location":"url/","text":"Url Class \u00b6 A class to store a URL Object. This class contains several function/methods to handle sitemap urls. Source code in pysitemaps/__init__.py class Url: \"\"\" A class to store a URL Object. This class contains several function/methods to handle sitemap urls. \"\"\" def __init__( self, loc: str, lastmod: str = datetime.now().strftime(\"%Y-%m-%d\"), images_loc: list = [], ) -> None: \"\"\"Intialize Url Object Args: loc (str): location of Url (full path with scheme) lastmod (str, optional): last modification date of Url. Defaults to datetime.now().strftime(\"%Y-%m-%d\"). images_loc (list, optional): List of Images included in the Url. Defaults to []. \"\"\" self.loc = loc self.lastmod = lastmod self.image_locations = images_loc def add_images(self, images_loc: list = []) -> None: \"\"\"append images to current Url Args: images_loc (list, optional): list of images location. Defaults to []. \"\"\" self.image_locations += images_loc def as_dict(self) -> dict: \"\"\"return Url as dict object Returns: dict: contains loc, lastmod and images keys. \"\"\" return { \"loc\": self.loc, \"lastmod\": self.lastmod, \"images\": self.image_locations, } __init__(loc, lastmod=datetime.now().strftime('%Y-%m-%d'), images_loc=[]) \u00b6 Intialize Url Object Parameters: Name Type Description Default loc str location of Url (full path with scheme) required lastmod str last modification date of Url. Defaults to datetime.now().strftime(\u201c%Y-%m-%d\u201d). datetime.now().strftime('%Y-%m-%d') images_loc list List of Images included in the Url. Defaults to []. [] Source code in pysitemaps/__init__.py def __init__( self, loc: str, lastmod: str = datetime.now().strftime(\"%Y-%m-%d\"), images_loc: list = [], ) -> None: \"\"\"Intialize Url Object Args: loc (str): location of Url (full path with scheme) lastmod (str, optional): last modification date of Url. Defaults to datetime.now().strftime(\"%Y-%m-%d\"). images_loc (list, optional): List of Images included in the Url. Defaults to []. \"\"\" self.loc = loc self.lastmod = lastmod self.image_locations = images_loc add_images(images_loc=[]) \u00b6 append images to current Url Parameters: Name Type Description Default images_loc list list of images location. Defaults to []. [] Source code in pysitemaps/__init__.py def add_images(self, images_loc: list = []) -> None: \"\"\"append images to current Url Args: images_loc (list, optional): list of images location. Defaults to []. \"\"\" self.image_locations += images_loc as_dict() \u00b6 return Url as dict object Returns: Name Type Description dict dict contains loc, lastmod and images keys. Source code in pysitemaps/__init__.py def as_dict(self) -> dict: \"\"\"return Url as dict object Returns: dict: contains loc, lastmod and images keys. \"\"\" return { \"loc\": self.loc, \"lastmod\": self.lastmod, \"images\": self.image_locations, }","title":"Url Class"},{"location":"url/#url-class","text":"A class to store a URL Object. This class contains several function/methods to handle sitemap urls. Source code in pysitemaps/__init__.py class Url: \"\"\" A class to store a URL Object. This class contains several function/methods to handle sitemap urls. \"\"\" def __init__( self, loc: str, lastmod: str = datetime.now().strftime(\"%Y-%m-%d\"), images_loc: list = [], ) -> None: \"\"\"Intialize Url Object Args: loc (str): location of Url (full path with scheme) lastmod (str, optional): last modification date of Url. Defaults to datetime.now().strftime(\"%Y-%m-%d\"). images_loc (list, optional): List of Images included in the Url. Defaults to []. \"\"\" self.loc = loc self.lastmod = lastmod self.image_locations = images_loc def add_images(self, images_loc: list = []) -> None: \"\"\"append images to current Url Args: images_loc (list, optional): list of images location. Defaults to []. \"\"\" self.image_locations += images_loc def as_dict(self) -> dict: \"\"\"return Url as dict object Returns: dict: contains loc, lastmod and images keys. \"\"\" return { \"loc\": self.loc, \"lastmod\": self.lastmod, \"images\": self.image_locations, }","title":"Url Class"},{"location":"url/#pysitemaps.Url.__init__","text":"Intialize Url Object Parameters: Name Type Description Default loc str location of Url (full path with scheme) required lastmod str last modification date of Url. Defaults to datetime.now().strftime(\u201c%Y-%m-%d\u201d). datetime.now().strftime('%Y-%m-%d') images_loc list List of Images included in the Url. Defaults to []. [] Source code in pysitemaps/__init__.py def __init__( self, loc: str, lastmod: str = datetime.now().strftime(\"%Y-%m-%d\"), images_loc: list = [], ) -> None: \"\"\"Intialize Url Object Args: loc (str): location of Url (full path with scheme) lastmod (str, optional): last modification date of Url. Defaults to datetime.now().strftime(\"%Y-%m-%d\"). images_loc (list, optional): List of Images included in the Url. Defaults to []. \"\"\" self.loc = loc self.lastmod = lastmod self.image_locations = images_loc","title":"__init__()"},{"location":"url/#pysitemaps.Url.add_images","text":"append images to current Url Parameters: Name Type Description Default images_loc list list of images location. Defaults to []. [] Source code in pysitemaps/__init__.py def add_images(self, images_loc: list = []) -> None: \"\"\"append images to current Url Args: images_loc (list, optional): list of images location. Defaults to []. \"\"\" self.image_locations += images_loc","title":"add_images()"},{"location":"url/#pysitemaps.Url.as_dict","text":"return Url as dict object Returns: Name Type Description dict dict contains loc, lastmod and images keys. Source code in pysitemaps/__init__.py def as_dict(self) -> dict: \"\"\"return Url as dict object Returns: dict: contains loc, lastmod and images keys. \"\"\" return { \"loc\": self.loc, \"lastmod\": self.lastmod, \"images\": self.image_locations, }","title":"as_dict()"},{"location":"xmldocument/","text":"XmlDocument Class \u00b6 A class to store an XML Sitemap (index, sub-sitemaps, or main-sitemap) Document. This class contains several function methods to handle XML Sitemaps. It includes convenient functions e.g. add_url and add_url_set. Source code in pysitemaps/__init__.py class XmlDocument: \"\"\" A class to store an XML Sitemap (index, sub-sitemaps, or main-sitemap) Document. This class contains several function methods to handle XML Sitemaps. It includes convenient functions e.g. add_url and add_url_set. \"\"\" def __init__( self, loc: str, lastmod: str = datetime.now().strftime(\"%Y-%m-%d\"), include_urls: bool = False, ) -> None: \"\"\"Initialize XmlDocument Args: loc (str): loc of XmlDocument lastmod (str, optional): lastmod of XmlDocument. Defaults to datetime.now().strftime(\"%Y-%m-%d\"). include_urls (bool, optional): If true then XmlDocument will also include (aviaalble) Urls otherwise ignored. Defaults to False. \"\"\" self.loc = loc self.lastmod = lastmod self.urls = [] if include_urls: file_url = get_corrected_url(loc, fix_slash=\"\") response = get_remote_content(file_url) if response.status_code == 200: self.add_from_text(response.text) def add_object(self, url_object: Url): \"\"\"add Url Object to current XmlDocument Args: url_object (Url): Url Object. \"\"\" if url_object: self.urls.append(url_object) def add_url( self, loc: str, lastmod: str = datetime.now().strftime(\"%Y-%m-%d\"), images_loc: list = [], ) -> None: \"\"\"add url to current sitemap by specifiyig loc, lastmod and list of images. Args: loc (str): _description_ lastmod (str, optional): _description_. Defaults to datetime.now().strftime(\"%Y-%m-%d\"). images_loc (list, optional): _description_. Defaults to []. \"\"\" if loc: self.urls.append(Url(loc=loc, lastmod=lastmod, images_loc=images_loc)) def add_from_text(self, xml_as_text: str) -> None: \"\"\" \"\"\" self.urls += extract_url_set(xml_as_text=xml_as_text) def as_dict(self) -> dict: \"\"\"return XmlDocument as dit Returns: dict: contains loc, lastmod of XML Document. It also include urls key containing list of Url(s). \"\"\" return { \"loc\": self.loc, \"lastmod\": self.lastmod, \"urls\": [url.as_dict() for url in self.urls], } __init__(loc, lastmod=datetime.now().strftime('%Y-%m-%d'), include_urls=False) \u00b6 Initialize XmlDocument Parameters: Name Type Description Default loc str loc of XmlDocument required lastmod str lastmod of XmlDocument. Defaults to datetime.now().strftime(\u201c%Y-%m-%d\u201d). datetime.now().strftime('%Y-%m-%d') include_urls bool If true then XmlDocument will also include (aviaalble) Urls otherwise ignored. Defaults to False. False Source code in pysitemaps/__init__.py def __init__( self, loc: str, lastmod: str = datetime.now().strftime(\"%Y-%m-%d\"), include_urls: bool = False, ) -> None: \"\"\"Initialize XmlDocument Args: loc (str): loc of XmlDocument lastmod (str, optional): lastmod of XmlDocument. Defaults to datetime.now().strftime(\"%Y-%m-%d\"). include_urls (bool, optional): If true then XmlDocument will also include (aviaalble) Urls otherwise ignored. Defaults to False. \"\"\" self.loc = loc self.lastmod = lastmod self.urls = [] if include_urls: file_url = get_corrected_url(loc, fix_slash=\"\") response = get_remote_content(file_url) if response.status_code == 200: self.add_from_text(response.text) add_object(url_object) \u00b6 add Url Object to current XmlDocument Parameters: Name Type Description Default url_object Url Url Object. required Source code in pysitemaps/__init__.py def add_object(self, url_object: Url): \"\"\"add Url Object to current XmlDocument Args: url_object (Url): Url Object. \"\"\" if url_object: self.urls.append(url_object) add_url(loc, lastmod=datetime.now().strftime('%Y-%m-%d'), images_loc=[]) \u00b6 add url to current sitemap by specifiyig loc, lastmod and list of images. Parameters: Name Type Description Default loc str description required lastmod str description . Defaults to datetime.now().strftime(\u201c%Y-%m-%d\u201d). datetime.now().strftime('%Y-%m-%d') images_loc list description . Defaults to []. [] Source code in pysitemaps/__init__.py def add_url( self, loc: str, lastmod: str = datetime.now().strftime(\"%Y-%m-%d\"), images_loc: list = [], ) -> None: \"\"\"add url to current sitemap by specifiyig loc, lastmod and list of images. Args: loc (str): _description_ lastmod (str, optional): _description_. Defaults to datetime.now().strftime(\"%Y-%m-%d\"). images_loc (list, optional): _description_. Defaults to []. \"\"\" if loc: self.urls.append(Url(loc=loc, lastmod=lastmod, images_loc=images_loc)) as_dict() \u00b6 return XmlDocument as dit Returns: Name Type Description dict dict contains loc, lastmod of XML Document. It also include urls key containing list of Url(s). Source code in pysitemaps/__init__.py def as_dict(self) -> dict: \"\"\"return XmlDocument as dit Returns: dict: contains loc, lastmod of XML Document. It also include urls key containing list of Url(s). \"\"\" return { \"loc\": self.loc, \"lastmod\": self.lastmod, \"urls\": [url.as_dict() for url in self.urls], }","title":"XmlDocument Class"},{"location":"xmldocument/#xmldocument-class","text":"A class to store an XML Sitemap (index, sub-sitemaps, or main-sitemap) Document. This class contains several function methods to handle XML Sitemaps. It includes convenient functions e.g. add_url and add_url_set. Source code in pysitemaps/__init__.py class XmlDocument: \"\"\" A class to store an XML Sitemap (index, sub-sitemaps, or main-sitemap) Document. This class contains several function methods to handle XML Sitemaps. It includes convenient functions e.g. add_url and add_url_set. \"\"\" def __init__( self, loc: str, lastmod: str = datetime.now().strftime(\"%Y-%m-%d\"), include_urls: bool = False, ) -> None: \"\"\"Initialize XmlDocument Args: loc (str): loc of XmlDocument lastmod (str, optional): lastmod of XmlDocument. Defaults to datetime.now().strftime(\"%Y-%m-%d\"). include_urls (bool, optional): If true then XmlDocument will also include (aviaalble) Urls otherwise ignored. Defaults to False. \"\"\" self.loc = loc self.lastmod = lastmod self.urls = [] if include_urls: file_url = get_corrected_url(loc, fix_slash=\"\") response = get_remote_content(file_url) if response.status_code == 200: self.add_from_text(response.text) def add_object(self, url_object: Url): \"\"\"add Url Object to current XmlDocument Args: url_object (Url): Url Object. \"\"\" if url_object: self.urls.append(url_object) def add_url( self, loc: str, lastmod: str = datetime.now().strftime(\"%Y-%m-%d\"), images_loc: list = [], ) -> None: \"\"\"add url to current sitemap by specifiyig loc, lastmod and list of images. Args: loc (str): _description_ lastmod (str, optional): _description_. Defaults to datetime.now().strftime(\"%Y-%m-%d\"). images_loc (list, optional): _description_. Defaults to []. \"\"\" if loc: self.urls.append(Url(loc=loc, lastmod=lastmod, images_loc=images_loc)) def add_from_text(self, xml_as_text: str) -> None: \"\"\" \"\"\" self.urls += extract_url_set(xml_as_text=xml_as_text) def as_dict(self) -> dict: \"\"\"return XmlDocument as dit Returns: dict: contains loc, lastmod of XML Document. It also include urls key containing list of Url(s). \"\"\" return { \"loc\": self.loc, \"lastmod\": self.lastmod, \"urls\": [url.as_dict() for url in self.urls], }","title":"XmlDocument Class"},{"location":"xmldocument/#pysitemaps.XmlDocument.__init__","text":"Initialize XmlDocument Parameters: Name Type Description Default loc str loc of XmlDocument required lastmod str lastmod of XmlDocument. Defaults to datetime.now().strftime(\u201c%Y-%m-%d\u201d). datetime.now().strftime('%Y-%m-%d') include_urls bool If true then XmlDocument will also include (aviaalble) Urls otherwise ignored. Defaults to False. False Source code in pysitemaps/__init__.py def __init__( self, loc: str, lastmod: str = datetime.now().strftime(\"%Y-%m-%d\"), include_urls: bool = False, ) -> None: \"\"\"Initialize XmlDocument Args: loc (str): loc of XmlDocument lastmod (str, optional): lastmod of XmlDocument. Defaults to datetime.now().strftime(\"%Y-%m-%d\"). include_urls (bool, optional): If true then XmlDocument will also include (aviaalble) Urls otherwise ignored. Defaults to False. \"\"\" self.loc = loc self.lastmod = lastmod self.urls = [] if include_urls: file_url = get_corrected_url(loc, fix_slash=\"\") response = get_remote_content(file_url) if response.status_code == 200: self.add_from_text(response.text)","title":"__init__()"},{"location":"xmldocument/#pysitemaps.XmlDocument.add_object","text":"add Url Object to current XmlDocument Parameters: Name Type Description Default url_object Url Url Object. required Source code in pysitemaps/__init__.py def add_object(self, url_object: Url): \"\"\"add Url Object to current XmlDocument Args: url_object (Url): Url Object. \"\"\" if url_object: self.urls.append(url_object)","title":"add_object()"},{"location":"xmldocument/#pysitemaps.XmlDocument.add_url","text":"add url to current sitemap by specifiyig loc, lastmod and list of images. Parameters: Name Type Description Default loc str description required lastmod str description . Defaults to datetime.now().strftime(\u201c%Y-%m-%d\u201d). datetime.now().strftime('%Y-%m-%d') images_loc list description . Defaults to []. [] Source code in pysitemaps/__init__.py def add_url( self, loc: str, lastmod: str = datetime.now().strftime(\"%Y-%m-%d\"), images_loc: list = [], ) -> None: \"\"\"add url to current sitemap by specifiyig loc, lastmod and list of images. Args: loc (str): _description_ lastmod (str, optional): _description_. Defaults to datetime.now().strftime(\"%Y-%m-%d\"). images_loc (list, optional): _description_. Defaults to []. \"\"\" if loc: self.urls.append(Url(loc=loc, lastmod=lastmod, images_loc=images_loc))","title":"add_url()"},{"location":"xmldocument/#pysitemaps.XmlDocument.as_dict","text":"return XmlDocument as dit Returns: Name Type Description dict dict contains loc, lastmod of XML Document. It also include urls key containing list of Url(s). Source code in pysitemaps/__init__.py def as_dict(self) -> dict: \"\"\"return XmlDocument as dit Returns: dict: contains loc, lastmod of XML Document. It also include urls key containing list of Url(s). \"\"\" return { \"loc\": self.loc, \"lastmod\": self.lastmod, \"urls\": [url.as_dict() for url in self.urls], }","title":"as_dict()"}]}